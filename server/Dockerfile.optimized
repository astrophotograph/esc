# Optimized Python FastAPI Server Dockerfile
FROM python:3.12-slim AS base

# Install system dependencies in base stage
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libopencv-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Builder stage for dependencies
FROM base AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install uv package manager for faster dependency management
RUN pip install --no-cache-dir uv

WORKDIR /app

# Copy dependency files
COPY pyproject.toml requirements.txt uv.lock ./

# Install dependencies to a specific location
RUN uv sync --frozen --no-dev

# Production stage
FROM base AS production

# Create non-root user
RUN useradd --create-home --shell /bin/bash --uid 1000 telescope

WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder --chown=telescope:telescope /app/.venv /app/.venv

# Add venv to PATH
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app:$PYTHONPATH"
ENV PYTHONUNBUFFERED=1

# Copy application code
COPY --chown=telescope:telescope . .

# Ensure the restart script is executable
RUN chmod +x /app/start_with_restart.sh

# Switch to non-root user
USER telescope

# Expose port
EXPOSE 8000

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start the server with auto-restart capability
CMD ["/app/start_with_restart.sh", "--server-port", "8000"]